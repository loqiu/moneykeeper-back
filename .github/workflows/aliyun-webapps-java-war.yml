# This workflow will build and push a Java application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-java?tabs=javase&pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the JAVA_VERSION environment variable below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy WAR app to Alibaba Cloud

env:
  ALIYUN_ECS_SERVER_IP: ${{ secrets.ALIYUN_ECS_SERVER_IP }}           # Set your ECS server IP
  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}           # Set your Alibaba Cloud Access Key ID
  ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}   # Set your Alibaba Cloud Access Key Secret
  ALIYUN_INSTANCE_ID: ${{ secrets.ALIYUN_INSTANCE_ID }} # The name of your app
  JAVA_VERSION: '17'                          # Set the Java version to use
  DISTRIBUTION: temurin                       # Java distribution, e.g., zulu

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java version
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRIBUTION }}
          cache: 'maven'
          settings: |
            <settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">
                <servers>
                    <server>
                        <id>nexus-releases</id>
                        <username>admin</username>
                        <password>Jin11167377.</password>
                    </server>
                    <server>
                        <id>nexus-snapshots</id>
                        <username>admin</username>
                        <password>Jin11167377.</password>
                    </server>
                </servers>
                <mirrors>
                  <!-- Releases 仓库重定向 -->
                  <mirror>
                      <id>nexus-releases-mirror</id>
                      <mirrorOf>nexus-releases</mirrorOf>
                      <url>http://8.208.90.124:8283/repository/maven-releases/</url>
                  </mirror>
              
                  <!-- Snapshots 仓库重定向 -->
                  <mirror>
                      <id>nexus-snapshots-mirror</id>
                      <mirrorOf>nexus-snapshots</mirrorOf>
                      <url>http://8.208.90.124:8283/repository/maven-snapshots/</url>
                  </mirror>
              
                  <!-- 覆盖默认的 HTTP 拦截器 -->
                  <mirror>
                      <id>allow-http</id>
                      <mirrorOf>external:http:*</mirrorOf>
                      <url>http://8.208.90.124:8283/repository/maven-releases/</url>
                  </mirror>
            </settings>

      - name: Build with Maven
        run: mvn clean package -X
        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: '${{ github.workspace }}/target/*.war'  # 修改为war包路径


  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: java-app

      # 添加清理步骤（放在部署war包之前）
      - name: Clean before deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            systemctl stop tomcat
            rm -rf /usr/local/tomcat/apache-tomcat-10.1.33/webapps/moneykeeper-back*
            rm -rf /usr/local/tomcat/apache-tomcat-10.1.33/work/*
            rm -rf /usr/local/tomcat/apache-tomcat-10.1.33/temp/*

      - name: Deploy to CentOS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.war"
          target: "/usr/local/tomcat/apache-tomcat-10.1.33/webapps/"    # 替换为你的Tomcat webapps目录

      - name: Restart Tomcat
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            systemctl restart tomcat
